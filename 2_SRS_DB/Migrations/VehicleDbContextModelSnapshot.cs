// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using _2_SRS_DB;

#nullable disable

namespace _2_SRS_DB.Migrations
{
    [DbContext(typeof(VehicleDbContext))]
    partial class VehicleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("_2_SRS_DB.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("vehicles", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("_2_SRS_DB.Car", b =>
                {
                    b.HasBaseType("_2_SRS_DB.Vehicle");

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body_type");

                    b.Property<int>("PassengerCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("passenger_capacity");

                    b.ToTable("cars", (string)null);
                });

            modelBuilder.Entity("_2_SRS_DB.Motorcycle", b =>
                {
                    b.HasBaseType("_2_SRS_DB.Vehicle");

                    b.Property<decimal>("EngineVolume")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("engine_volume");

                    b.Property<bool>("IsRacing")
                        .HasColumnType("boolean")
                        .HasColumnName("is_racing");

                    b.ToTable("motorcycles", (string)null);
                });

            modelBuilder.Entity("_2_SRS_DB.Truck", b =>
                {
                    b.HasBaseType("_2_SRS_DB.Vehicle");

                    b.Property<int>("AxleCount")
                        .HasColumnType("integer")
                        .HasColumnName("axle_count");

                    b.Property<decimal>("LoadCapacity")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("load_capacity");

                    b.ToTable("trucks", (string)null);
                });

            modelBuilder.Entity("_2_SRS_DB.Car", b =>
                {
                    b.HasOne("_2_SRS_DB.Vehicle", null)
                        .WithOne()
                        .HasForeignKey("_2_SRS_DB.Car", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_2_SRS_DB.Motorcycle", b =>
                {
                    b.HasOne("_2_SRS_DB.Vehicle", null)
                        .WithOne()
                        .HasForeignKey("_2_SRS_DB.Motorcycle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_2_SRS_DB.Truck", b =>
                {
                    b.HasOne("_2_SRS_DB.Vehicle", null)
                        .WithOne()
                        .HasForeignKey("_2_SRS_DB.Truck", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
